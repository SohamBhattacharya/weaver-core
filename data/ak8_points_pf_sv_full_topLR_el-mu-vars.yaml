selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   (jet_tightId==1) & (jet_no<2) & (fj_pt>200) & (fj_pt<3500) & (event_no%7!=0) & (fj_isTop==1)
   #(jet_tightId==1) & (jet_no<2) & (fj_pt>200) & (fj_pt<3500) & (event_no%7!=0)

test_time_selection:
   ### selection to apply at test time (i.e., when running w/ --predict)
   (jet_tightId==1) & (jet_no<2) & (fj_pt>200) & (fj_pt<3500) & (event_no%7==0) & (fj_isTop==1)
   #(jet_tightId==1) & (jet_no<2) & (fj_pt>200) & (fj_pt<3500) & (event_no%7==0)

treename: "deepntuplizer/tree"

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   #pfcand_mask: awkward.JaggedArray.ones_like(pfcand_etarel)
   #sv_mask: awkward.JaggedArray.ones_like(sv_etarel)
   pfcand_mask: awkward.ones_like(pfcand_etarel)
   sv_mask: awkward.ones_like(sv_etarel)
   
   label_TopL_bcq:     (sample_isTopLH & label_Top_bcq)
   label_TopL_bqq:     (sample_isTopLH & label_Top_bqq)
   label_TopL_bc:      (sample_isTopLH & label_Top_bc)
   label_TopL_bq:      (sample_isTopLH & label_Top_bq)
   label_TopL_bele:    (sample_isTopLH & label_Top_bele)
   label_TopL_bmu:     (sample_isTopLH & label_Top_bmu)
   label_TopL_btau:    (sample_isTopLH & label_Top_btau)
   
   label_TopR_bcq:     (sample_isTopRH & label_Top_bcq)
   label_TopR_bqq:     (sample_isTopRH & label_Top_bqq)
   label_TopR_bc:      (sample_isTopRH & label_Top_bc)
   label_TopR_bq:      (sample_isTopRH & label_Top_bq)
   label_TopR_bele:    (sample_isTopRH & label_Top_bele)
   label_TopR_bmu:     (sample_isTopRH & label_Top_bmu)
   label_TopR_btau:    (sample_isTopRH & label_Top_btau)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  ### [note]: `[var]_mask` will not be transformed even if `method=auto`
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   pf_points:
      length: 100
      vars: 
         - pfcand_etarel
         - pfcand_phirel
   pf_features:
      length: 100
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [pfcand_pt_log_nopuppi, 1, 0.5]
         - [pfcand_e_log_nopuppi, 1.3, 0.5]
         - pfcand_etarel
         - pfcand_phirel
         - [pfcand_abseta, 0.6, 1.6]
         - pfcand_charge
         - pfcand_isEl
         - pfcand_isMu
         - pfcand_isGamma
         - pfcand_isChargedHad
         - pfcand_isNeutralHad
         - [pfcand_VTX_ass, 4, 0.3]
         - pfcand_lostInnerHits
         - [pfcand_normchi2, 5, 0.2]
         - [pfcand_quality, 0, 0.2]
         - [pfcand_dz, 0, 180]
         - [pfcand_dzsig, 0, 0.9]
         - [pfcand_dxy, 0.0, 300]
         - [pfcand_dxysig, 0, 1.0]
         - [pfcand_btagEtaRel, 1.5, 0.5]
         - [pfcand_btagPtRatio, 0, 1]
         - [pfcand_btagPParRatio, 0, 1]
         - [pfcand_btagSip3dVal, 0, 100]
         - [pfcand_btagSip3dSig, 0, 0.5]
         - [pfcand_btagJetDistVal, 0, 40]
         
         - pfcand_isElMatched
         - [pfcand_el_oldhe, 4.4832e-01, 6.7339e-01]
         - [pfcand_el_oldsigmaietaieta, 1.3697e-02, 1.7542e+02]
         - [pfcand_el_oldsigmaiphiiphi, 1.7227e-02, 1.9988e+02]
         - [pfcand_el_ep, 2.5590e+00, 2.7883e-01]
         - [pfcand_el_scletawidth, 1.1253e-02, 2.2252e+02]

         - pfcand_isMuMatched
         - [pfcand_mu_nMatchedStations, 1.7587e+00, 5.8681e-01]
         - [pfcand_mu_segCompat, 7.9775e-01, 2.1977e+00]

         
   pf_mask:
      length: 100
      vars: 
         - pfcand_mask
   sv_points:
      length: 10
      vars:
         - sv_etarel 
         - sv_phirel
   sv_features:
      length: 10
      vars:
         - [sv_pt_log, 4, 0.6]
         - [sv_mass, 1.2, 0.3]
         - sv_etarel
         - sv_phirel
         - [sv_abseta, 0.5, 1.6]
         - [sv_ntracks, 3, 1]
         - [sv_normchi2, 0.8, 0.6]
         - [sv_dxy, 0.4, 0.25]
         - [sv_dxysig, 7, 0.02]
         - [sv_d3d, 0.5, 0.2]
         - [sv_d3dsig, 7, 0.02]
   sv_mask:
      length: 10
      vars:
         - sv_mask

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [
      label_TopL_bcq, label_TopL_bqq, label_TopL_bc, label_TopL_bq, label_TopL_bele, label_TopL_bmu, label_TopL_btau,
      label_TopR_bcq, label_TopR_bqq, label_TopR_bc, label_TopR_bq, label_TopR_bele, label_TopR_bmu, label_TopR_btau,
      ]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass) 

observers:
   - event_no
   - event_count_file
   - sample_isTopLH
   - sample_isTopRH
   - fj_label
   - fj_pt
   - fj_eta
   - fj_phi
   - fj_mass
   - fj_sdmass
   - fj_sdmass_fromsubjets
   - fj_gen_pt
   - fj_gen_eta
   - fj_gen_mass
   - fj_gen_deltaR
   - npfcands
   - pfParticleNetJetTags_probQCDb
   - pfParticleNetJetTags_probQCDbb
   - pfParticleNetJetTags_probQCDc
   - pfParticleNetJetTags_probQCDcc
   - pfParticleNetJetTags_probQCDothers
   - pfParticleNetJetTags_probTbc
   - pfParticleNetJetTags_probTbcq
   - pfParticleNetJetTags_probTbel
   - pfParticleNetJetTags_probTbmu
   - pfParticleNetJetTags_probTbq
   - pfParticleNetJetTags_probTbqq
   - pfParticleNetJetTags_probTbta


weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      fj_pt: [200, 251, 316, 398, 501, 630, 793, 997, 1255, 1579, 1987, 2500, 3500]
      fj_sdmass: [-10000, 10000]
   reweight_classes: [
      sample_isTopLH,
      sample_isTopRH,
      ]
   class_weights: [
      1,
      1,
      #1,
      #1,
      #0.33, 0.33, 0.33,
      ]
   reweight_hists:

